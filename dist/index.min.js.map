{"version":3,"file":"index.min.js","sources":["../src/index.js"],"sourcesContent":["const handleValidation = ({\n  errorArray = [],\n  dataSource = [],\n  defaultErrorMessage = '',\n}) => {\n  let isPass = true;\n  let errorValidation = {};\n  let defaultMessage = defaultErrorMessage ? { msg: defaultErrorMessage } : '';\n\n  //接受 condition 為 [ condition1, condition2]\n  const handleValidateItem = (errorItem) => {\n    if (errorItem.condition.every((error) => error !== false)) {\n      return false;\n    }\n    return true;\n  };\n\n  const setNestedErrorMessage = (\n    tempErrorObject,\n    currentIndex,\n    errorFormat,\n    errorResult\n  ) => {\n    const format = errorFormat.shift();\n    const targetIndex = format === 'index' ? currentIndex : format;\n    if (errorFormat.length === 0) {\n      tempErrorObject[targetIndex] = errorResult;\n      return;\n    }\n    tempErrorObject[targetIndex] = {};\n    setNestedErrorMessage(\n      tempErrorObject[targetIndex],\n      currentIndex,\n      errorFormat,\n      errorResult\n    );\n  };\n\n  errorArray.forEach((item) => {\n    if (!Array.isArray(item?.condition) && !item?.customCondition) {\n      return console.error(\n        `Invalid type \\`${typeof !item?.condition}\"\\` supplied to parameter \"condition\", expected \\`array\\`;\n          type \\`${typeof !item?.customCondition}\"\\` supplied to parameter \"customCondition\", expected \\`function\\\n        `\n      );\n    }\n\n    if (typeof item?.index !== 'string') {\n      // eslint-disable-next-line no-console\n      return console.error(\n        `Invalid type \\`${typeof item?.index}\"\\` supplied to parameter \"index\", expected \\`string\\`!`\n      );\n    }\n\n    // 有傳customValidate的情況\n    if (item?.customCondition) {\n      errorValidation[item.index] = [];\n      let conditionReturnArray = [false, false];\n\n      //conditionReturnArray ex. [true, true, false, false, true]\n      item.customCondition(dataSource, conditionReturnArray);\n      if (!Array.isArray(conditionReturnArray)) {\n        // eslint-disable-next-line no-console\n        return console.error(\n          `Invalid type \\`${typeof conditionReturnArray}\"\\` return from parameter \"customValidation\", expected \\`array\\`!`\n        );\n      }\n      if (conditionReturnArray.length) {\n        const multiple = conditionReturnArray.length > 1;\n        let returnObject = multiple ? [] : null;\n        //輸出errorValidation  錯誤的值用error message 正確的值設定為null      ex. [{msg: Message},  null, {msg: Message}]\n        conditionReturnArray.forEach((result, index) => {\n          let value = true;\n          if (!result) {\n            value = false;\n            isPass = false;\n          }\n\n          const tempErrorObject = {};\n          let targetTempErrorObject;\n\n          const errorResult = value\n            ? null\n            : item?.errorMessage\n            ? { msg: item?.errorMessage }\n            : defaultMessage;\n\n          if (item?.errorFormat && errorResult) {\n            const tempErrorFormat = item?.errorFormat.slice();\n            setNestedErrorMessage(\n              tempErrorObject,\n              index,\n              tempErrorFormat,\n              errorResult\n            );\n            targetTempErrorObject =\n              Object.keys(tempErrorObject).length === 0\n                ? null\n                : tempErrorObject;\n\n            if (multiple) {\n              returnObject.push(targetTempErrorObject);\n            } else {\n              returnObject = targetTempErrorObject;\n            }\n          } else if (multiple) {\n            returnObject.push(errorResult);\n          } else {\n            returnObject = errorResult;\n          }\n        });\n        errorValidation[item.index] = returnObject;\n        //    errorValidation[item.index][index] = errorResult;\n      }\n      return;\n    } else {\n      const isValidated = handleValidateItem(item);\n      if (!isValidated) {\n        errorValidation[item.index] = item?.errorMessage\n          ? { msg: item?.errorMessage }\n          : defaultMessage;\n        isPass = false;\n      }\n    }\n  });\n  return [isPass, errorValidation];\n};\n\nexport default handleValidation;\n"],"names":["errorArray","dataSource","defaultErrorMessage","isPass","errorValidation","defaultMessage","msg","setNestedErrorMessage","tempErrorObject","currentIndex","errorFormat","errorResult","format","shift","targetIndex","length","forEach","item","Array","isArray","condition","customCondition","console","error","index","conditionReturnArray","multiple","returnObject","result","value","targetTempErrorObject","errorMessage","tempErrorFormat","slice","Object","keys","push","every"],"mappings":"4BAAyB,EACvBA,aAAa,GACbC,aAAa,GACbC,sBAAsB,OAEtB,IAAIC,GAAS,EACTC,EAAkB,GAClBC,EAAiBH,EAAsB,CAAEI,IAAKJ,GAAwB,GAG1E,MAOMK,EAAwB,CAC5BC,EACAC,EACAC,EACAC,KAEA,MAAMC,EAASF,EAAYG,QACrBC,EAAyB,UAAXF,EAAqBH,EAAeG,EAC7B,IAAvBF,EAAYK,QAIhBP,EAAgBM,GAAe,GAC/BP,EACEC,EAAgBM,GAChBL,EACAC,EACAC,IARAH,EAAgBM,GAAeH,GAmGnC,OAvFAX,EAAWgB,SAASC,IAClB,IAAKC,MAAMC,QAAQF,GAAMG,aAAeH,GAAMI,gBAC5C,OAAOC,QAAQC,MACb,yBAA0BN,GAAMG,gGACbH,GAAMI,2FAK7B,GAA2B,iBAAhBJ,GAAMO,MAEf,OAAOF,QAAQC,MACb,yBAAyBN,GAAMO,gEAKnC,GAAIP,GAAMI,gBAAV,CACEjB,EAAgBa,EAAKO,OAAS,GAC9B,IAAIC,EAAuB,EAAC,GAAO,GAInC,GADAR,EAAKI,gBAAgBpB,EAAYwB,IAC5BP,MAAMC,QAAQM,GAEjB,OAAOH,QAAQC,MACb,yBAAyBE,sEAG7B,GAAIA,EAAqBV,OAAQ,CAC/B,MAAMW,EAAWD,EAAqBV,OAAS,EAC/C,IAAIY,EAAeD,EAAW,GAAK,KAEnCD,EAAqBT,SAAQ,CAACY,EAAQJ,KACpC,IAAIK,GAAQ,EACPD,IACHC,GAAQ,EACR1B,GAAS,GAGX,MAAMK,EAAkB,GACxB,IAAIsB,EAEJ,MAAMnB,EAAckB,EAChB,KACAZ,GAAMc,aACN,CAAEzB,IAAKW,GAAMc,cACb1B,EAEJ,GAAIY,GAAMP,aAAeC,EAAa,CACpC,MAAMqB,EAAkBf,GAAMP,YAAYuB,QAC1C1B,EACEC,EACAgB,EACAQ,EACArB,GAEFmB,EAC0C,IAAxCI,OAAOC,KAAK3B,GAAiBO,OACzB,KACAP,EAEFkB,EACFC,EAAaS,KAAKN,GAElBH,EAAeG,OAERJ,EACTC,EAAaS,KAAKzB,GAElBgB,EAAehB,KAGnBP,EAAgBa,EAAKO,OAASG,OAxDlC,EA6DyCV,EAzG3BG,UAAUiB,OAAOd,IAAoB,IAAVA,MA2GrCnB,EAAgBa,EAAKO,OAASP,GAAMc,aAChC,CAAEzB,IAAKW,GAAMc,cACb1B,EACJF,GAAS,OAIR,CAACA,EAAQC"}